{"version":3,"sources":["components/header/index.ts","components/header/header.tsx","components/footer/index.ts","components/footer/footer.tsx","components/preloader/index.ts","components/preloader/preloader.tsx","services/imageService.ts","components/image/index.ts","components/image/image.tsx","actions/action-creators.ts","actions/action-types.ts","components/error/index.ts","components/error/error.tsx","components/gallery/gallery.tsx","components/gallery/index.ts","components/errorBoundary/index.ts","components/errorBoundary/errorBoundary.tsx","components/buttonLoading/index.ts","components/buttonLoading/buttonLoading.tsx","components/form-button/form-button.tsx","components/popupForm/index.ts","components/popupForm/popupForm.tsx","components/comment/index.ts","components/comment/comment.tsx","components/popup/popup.tsx","components/popup/index.ts","App.tsx","serviceWorker.ts","reducers/galleryReducer.ts","reducers/popupReducer.ts","store.ts","index.tsx","components/error/error-image.png"],"names":["Header","className","Footer","Preloader","ImageService","baseUrl","getData","url","a","fetch","response","ok","json","Error","getAllImages","getFullImageData","id","postComment","text","date","comment","name","method","body","JSON","stringify","headers","then","res","Image","connect","dispatch","onShowPopup","type","payload","showPopup","connector","props","onClick","src","alt","img","Gallery","imageService","this","onStartLoading","onGetImages","images","catch","onGetError","hasError","map","image","key","Component","state","galleryReducer","loading","getImages","ErrorBoundary","setState","children","ButtonLoading","loadComment","popupReducer","sendingComment","PopupForm","reduxForm","form","onSubmit","handleSubmit","Field","required","placeholder","component","Comment","timestamp","toString","substr","length","Date","day","getDate","month","getMonth","year","getFullYear","fullData","Popup","handleFormSubmit","values","onSendComment","timeStamp","now","data","onGetComment","clearForm","onGetImageDetails","com","onClosePopup","comments","neededCom","filter","comm","i","undefined","currentImageId","load","imageDetails","getImageDetails","getComment","clearFields","isPopup","isOpen","href","Boolean","window","location","hostname","match","initialGalleryState","action","popupInitialState","newComments","rootReducer","combineReducers","formReduces","store","createStore","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"geACeA,G,qBCEI,WACf,OACI,gCACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,iBAAd,gBCNDC,G,OCEI,WACf,OACI,gCACI,yBAAKD,UAAU,aACX,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,mBAAf,sB,wDCPDE,G,OCEO,WAClB,OACI,6BAASF,UAAU,aACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,yCACX,yBAAKA,UAAU,oBACX,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,qC,yBC4BbG,E,iDA7CHC,Q,mDAEAC,Q,uCAAU,WAAOC,GAAP,eAAAC,EAAA,sEACOC,MAAM,GAAD,OAAI,EAAKJ,SAAT,OAAmBE,IAD/B,YACVG,EADU,QAEDC,GAFC,gCAGGD,EAASE,OAHZ,wEAMH,IAAIC,OAND,4C,2DAUXC,a,sBAAe,sBAAAN,EAAA,sEACL,EAAKF,QAAQ,UADR,mF,KAIfS,iB,uCAAmB,WAAOC,GAAP,SAAAR,EAAA,sEACT,EAAKF,QAAL,iBAAuBU,IADd,mF,2DAInBC,Y,uCAAc,WAAOC,EAAoCF,EAAmBG,GAA9D,iBAAAX,EAAA,6DACbY,EAAU,CACVC,KAAMH,EAAKG,KACXD,QAASF,EAAKE,QACdJ,KACAG,QAEAZ,EAPa,UAOJ,EAAKF,QAPD,kBAOkBW,EAPlB,+BASAP,MAAMF,EAAK,CACpBe,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CACL,OAAU,mBACV,eAAgB,sBAErBC,MAAM,SAACC,GAAD,OAASR,KAhBL,8EAmBP,IAAIP,MAAJ,MAnBO,yD,2DCvBVgB,G,OCqBCC,YAAQ,MAPG,SAACC,GACxB,MAAO,CACHC,YAAa,SAAChB,GAAD,OAAgBe,ECgBZ,SAACf,GACtB,MAAO,CACHiB,KChCkB,aDiClBC,QAASlB,GDnB6BmB,CAAUnB,QAYzCoB,EAvBmB,SAACC,GAAW,IACrCrB,EAAwBqB,EAAxBrB,GAAIT,EAAoB8B,EAApB9B,IAAKyB,EAAeK,EAAfL,YACd,OACI,yBAAK/B,UAAU,iBAAiBqC,QAAS,kBAAMN,EAAYhB,KACvD,yBAAKuB,IAAKhC,EAAKiC,IAAI,U,0BGThB3B,ECGG,WACd,OACI,6BAASZ,UAAU,SACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,uBAAuBsC,IAAKE,IAAKD,IAAI,UACpD,wBAAIvC,UAAU,uBAAd,2NCEdyC,E,4LAEyB,IAAD,OAClBC,EAAe,IAAIvC,EADD,EAEcwC,KAAKP,MAApCQ,EAFiB,EAEjBA,eAAgBC,EAFC,EAEDA,YACrBD,IACAF,EAAa7B,eACRa,MAAM,SAACoB,GAAD,OAA8BD,EAAYC,MAChDC,OAAO,kBAAM,EAAKX,MAAMY,kB,+BAGvB,IACDF,EAAUH,KAAKP,MAAfU,OACL,OAAKA,EAIDH,KAAKP,MAAMa,SACJ,kBAAC,EAAD,MAGP,6BAASjD,UAAU,WACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,oBAEP8C,EAAOI,KAAK,SAAAC,GAAK,OAAI,kBAAC,EAAD,eAAOC,IAAKD,EAAMpC,IAAQoC,UAXxD,kBAAC,EAAD,U,GAdGE,aCXPZ,ED4EGZ,aA7BM,SAACyB,GACrB,MAAO,CACHR,OAAQQ,EAAMC,eAAeT,OAC7BU,QAASF,EAAMC,eAAeC,QAC9BP,SAAUK,EAAMC,eAAeN,aAIZ,SAACnB,GACxB,MAAO,CACHc,eAAgB,kBAAMd,EJrCnB,CACHE,KCrBwB,sBG0DxBa,YAAa,SAACC,GAAD,OAA8BhB,EJjC1B,SAACgB,GACtB,MAAO,CACHd,KC1BkB,aD2BlBC,QAASa,GI8B2CW,CAAUX,KAC9DE,WAAY,kBAAMlB,EJQf,CACHE,KC7DiB,kBG4EVG,CAAUM,GEnFViB,E,2MCIXJ,MAAQ,CACJL,UAAU,G,mFAIVN,KAAKgB,SAAS,CACVV,UAAU,M,+BAKd,OAAIN,KAAKW,MAAML,SACJ,kBAAC,EAAD,MAEJN,KAAKP,MAAMwB,a,GAhBiBP,a,gCCF5BQ,G,cCEW,WACtB,OACI,yBAAK7D,UAAU,yCACX,yBAAKA,UAAU,oBACX,8BACA,8BACA,8BACA,8BACA,kCCkBDmC,EAHCN,aAVM,SAACyB,GACnB,MAAO,CACHQ,YAAaR,EAAMS,aAAaC,kBAWzB7B,EAvByB,SAACC,GACrC,OACI,gCAEQA,EAAM0B,YAAc,kBAAC,EAAD,MAAoB,0HCTzCG,ECeAC,YAAU,CAACC,KAAM,eAAjBD,EAX0B,SAAC9B,GACtC,OACI,0BAAMpC,UAAU,aAAaoE,SAAUhC,EAAMiC,cACzC,kBAACC,EAAA,EAAD,CAAOC,UAAQ,EAACvC,KAAK,OAAOZ,KAAK,OAAOoD,YAAY,8CAAWC,UAAU,UACzE,kBAACH,EAAA,EAAD,CAAOC,UAAQ,EAACvC,KAAK,OAAOZ,KAAK,UAAUoD,YAAY,wFAAkBC,UAAU,UACnF,kBAAC,EAAD,UCTGC,G,OCGe,SAACtC,GAC3B,IAAIuC,EAAYvC,EAAMlB,KAAK0D,WAC3BD,EAAYA,EAAUE,OAAO,EAAGF,EAAUG,OAAS,GACnD,IAAI5D,EAAO,IAAI6D,KAAkB,KAAZJ,GACjBK,EAAM9D,EAAK+D,UAAY,GAAjB,WAA0B/D,EAAK+D,WAAc/D,EAAK+D,UACxDC,EAAQhE,EAAKiE,WAAa,EAAI,GAAtB,WAA+BjE,EAAKiE,WAAa,GAAMjE,EAAKiE,WAAa,EACjFC,EAAOlE,EAAKmE,cACZC,EAAQ,UAAMN,EAAN,YAAaE,EAAb,YAAsBE,GAClC,OACI,yBAAKpF,UAAU,gBACX,0BAAMA,UAAU,QAAQsF,GACxB,uBAAGtF,UAAU,gBAAgBoC,EAAMhB,KAAnC,KACA,uBAAGpB,UAAU,gBAAgBoC,EAAMjB,Y,QCHzCoE,E,2MAUFC,iBAAmB,SAACC,GAChB,EAAKrD,MAAMsD,gBACX,IAAIhD,EAAe,IAAIvC,EAClBY,EAAM,EAAKqB,MAAXrB,GACD4E,EAAoBZ,KAAKa,MAC7BlD,EAAa1B,YAAYyE,EAAQ1E,EAAI4E,GAChCjE,MAAM,SAACmE,GACJ,EAAKzD,MAAM0D,aAAaD,GACxB,EAAKzD,MAAM2D,gB,mFAfnB,IAAIrD,EAAe,IAAIvC,EADD,EAEQwC,KAAKP,MAA9BrB,EAFiB,EAEjBA,GAAIiF,EAFa,EAEbA,kBACTtD,EAAa5B,iBAAiBC,GACzBW,MAAM,SAACmE,GAAD,OAA4BG,EAAkBH,Q,+BAgBnD,IAKFI,EALC,EAC2CtD,KAAKP,MAAhDe,EADA,EACAA,MAAO+C,EADP,EACOA,aAAcC,EADrB,EACqBA,SAC1B,GAFK,EAC+BlD,SAEhC,OAAO,kBAAC,EAAD,MAGX,GAAIE,GAASgD,GAAgC,IAApBA,EAASrB,OAAc,CAC5C,IAAIsB,EAAYD,EAASE,QAAQ,SAAClF,GAE9B,OAAOA,EAAQJ,KAAOoC,EAAMpC,MAE5BqF,IAEAH,EAAMG,EAAUlD,KAAK,SAACoD,EAAoCC,GAArC,OAAmD,kBAAC,EAAD,eAASnD,IAAKmD,GAAOD,QAIjG,OACI,6BAAStG,UAAU,SACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,cAEPmD,EAAQ,yBAAKb,IAAKa,EAAQA,EAAM7C,SAAMkG,EAAWjE,IAAI,KAAO,kBAAC,EAAD,OAGpE,kBAAC,EAAD,CAAW6B,SAAUzB,KAAK6C,mBAC1B,yBAAKxF,UAAU,iBAENmG,EAAyD,IAApBA,EAASrB,OAAe,uHAA0BmB,EAA5E,wHAGpB,yBAAKjG,UAAU,YAAYqC,QAAS,kBAAM6D,MACtC,uC,GAvDZ7C,aCZLkC,EDoHC1D,aAxCQ,SAACyB,GACrB,MAAO,CACHvC,GAAIuC,EAAMS,aAAa0C,eACvBC,KAAMpD,EAAMS,aAAaP,QACzBL,MAAOG,EAAMS,aAAa4C,aAC1B7C,YAAaR,EAAMS,aAAaC,eAChCmC,SAAU7C,EAAMS,aAAaoC,SAC7BlD,SAAUK,EAAMC,eAAeN,aAIZ,SAACnB,GACxB,MAAO,CACH4D,cAAe,kBAAM5D,EfnClB,CACHE,KClDoB,kBcqFpBkE,aAAc,kBAAMpE,EfjDjB,CACHE,KCvCmB,iBcwFnBgE,kBAAmB,SAACW,GAAD,OAAoC7E,Ef7ChC,SAAC6E,GAC5B,MAAO,CACH3E,KC5CyB,oBD6CzBC,QAAS0E,Ge0CuDC,CAAgBD,KAChFb,aAAc,SAAC3E,GAAD,OAA2CW,EfjCvC,SAACX,GACvB,MAAO,CACHa,KCvDmB,cDwDnBC,QAASd,Ge8ByD0F,CAAW1F,KAC7E4E,UAAU,kBAAMjE,EAASgF,IAAW,WAAX,GAAY,eAAe,GAAO,GAAlC,OAA4C,CAAC,OAAQ,eAC9E9D,WAAY,kBAAMlB,Ef3Bf,CACHE,KC7DiB,kBcgHVG,CAAUoD,GE7EVpD,EAHCN,aAPQ,SAACyB,GACrB,MAAO,CACHyD,QAASzD,EAAMS,aAAaiD,UAQrB7E,EAjCiB,SAACC,GAAW,IACnC2E,EAAW3E,EAAX2E,QACP,OACE,yBAAK/G,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,KACI,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,aACX,4DACkC,6BADlC,SAEU,uBAAGiH,KAAK,2DAAR,sBAAwF,6BAC9F,sCAAW,uBAAGA,KAAK,gCAAR,gBAGnB,kBAAC,EAAD,MAEIF,EAAU,kBAAC,EAAD,MAAY,SCfdG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCTFC,EAAsB,CACtBzE,OAAQ,KACRU,SAAS,EACTP,UAAU,GA0BCM,EAvBM,WAAyF,IAAxFD,EAAuF,uDAA1DiE,EAAqBC,EAAqC,uCACzG,OAAQA,EAAOxF,MACX,IlBhBwB,mBkBiBpB,OAAO,eACAsB,EADP,CAEIE,SAAS,IAEjB,IlBpBkB,akBqBd,OAAO,eACAF,EADP,CAEIE,SAAS,EACTV,OAAQ0E,EAAOvF,UAEvB,IlBpBiB,YkBqBb,OAAO,eACAqB,EADP,CAEIL,UAAU,IAElB,QACI,OAAOK,I,SCtBfmE,EAA2C,CAC3CjE,SAAS,EACTwD,QAAQ,EACRP,eAAgB,KAChBE,aAAc,KACd3C,gBAAgB,EAChBmC,SAAU,MA+CCpC,EA5CI,WAA0F,IAAzFT,EAAwF,uDAAzDmE,EAAmBD,EAAsC,uCACxG,OAAQA,EAAOxF,MACX,InBpBkB,amBqBd,OAAO,eACAsB,EADP,CAEI0D,QAAQ,EACRxD,SAAS,EACTiD,eAAgBe,EAAOvF,UAE/B,InBzByB,oBmB0BrB,OAAO,eACAqB,EADP,CAEIE,SAAS,EACTmD,aAAca,EAAOvF,UAE7B,InBhCmB,cmBiCf,OAAO,eACAqB,EADP,CAEI0D,QAAQ,EACRL,aAAc,OAEtB,InBpCoB,emBqChB,OAAO,eACArD,EADP,CAEIU,gBAAgB,IAExB,InBxCmB,cmByCf,IAAI0D,EAAc,GAOlB,OAFIA,EAJCpE,EAAM6C,SAII,sBAAO7C,EAAM6C,UAAb,CAAuBqB,EAAOvF,UAH3B,CAACuF,EAAOvF,SAKnB,eACAqB,EADP,CAEIU,gBAAgB,EAChBmC,SAAUuB,IAElB,QACI,OAAOpE,I,QCxDfqE,EAAcC,YAAgB,CAC9BrE,iBACAQ,eACAI,KAAM0D,MAMKC,EADHC,YAAYJ,GCLpBK,EACA,kBAAC,IAAD,CAAUF,MAAOA,GACb,kBAAC,EAAD,OAIRG,IAASC,OAAOF,EAAKG,SAASC,eAAe,SJ6HvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7G,MAAK,SAAA8G,GACJA,EAAaC,gBAEd1F,OAAM,SAAA2F,GACLC,QAAQD,MAAMA,EAAME,a,mBKjJ5BC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.015a1ee4.chunk.js","sourcesContent":["import Header from \"./header\";\r\nexport default Header;","import React, {FC} from 'react';\r\nimport './header.css';\r\n\r\nconst Header: FC = () => {\r\n    return (\r\n        <header>\r\n            <div className=\"container\">\r\n                <h1 className=\"header__title\">Test APP</h1>\r\n            </div>\r\n        </header>\r\n        )\r\n};\r\n\r\nexport default Header;","import Footer from \"./footer\";\r\nexport default Footer;","import React, {FC} from \"react\";\r\nimport './footer.css';\r\n\r\nconst Footer: FC = () => {\r\n    return (\r\n        <footer>\r\n            <div className=\"container\">\r\n                <div className=\"footer__line\"></div>\r\n                <div className=\"footer__content\">Â© 2018-2019</div>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import Preloader from \"./preloader\";\r\nexport default Preloader;","import React, {FC} from \"react\";\r\nimport './preloader.css';\r\n\r\nconst Preloader: FC = () => {\r\n    return (\r\n        <section className=\"preloader\">\r\n            <div className=\"container\">\r\n                <div className=\"preloader__content\">\r\n                    <div className=\"loadingio-spinner-spinner-6vvc926xcyi\">\r\n                        <div className=\"ldio-d4sfda2o76s\">\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                            <div></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n};\r\n\r\nexport default Preloader;\r\n","import {CommentType, ImageDetailsType, ImageType} from \"../types\";\r\n\r\nclass ImageService {\r\n\r\n    private baseUrl = `https://boiling-refuge-66454.herokuapp.com/`;\r\n\r\n    private getData = async (url: string) => {\r\n        let response = await fetch(`${this.baseUrl}${url}`);\r\n        if (response.ok) {\r\n            return await response.json()\r\n        }\r\n        else {\r\n            return new Error()\r\n        }\r\n    };\r\n\r\n    public getAllImages = async ():Promise<Array<ImageType>> => {\r\n        return await this.getData('images');\r\n    };\r\n\r\n    public getFullImageData = async (id: number | null):Promise<ImageDetailsType> => {\r\n        return await this.getData(`images/${id}`);\r\n    };\r\n\r\n    public postComment = async (text: CommentType & {name: string}, id: number | null, date: number) => {\r\n        let comment = {\r\n            name: text.name,\r\n            comment: text.comment,\r\n            id,\r\n            date\r\n        };\r\n        let url = `${this.baseUrl}images/${id}/comments`;\r\n        try {\r\n            return await fetch(url, {\r\n                method: 'POST',\r\n                body: JSON.stringify(comment),\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            }).then( (res) => comment);\r\n        }\r\n        catch (error){\r\n            throw new Error(error);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default ImageService;\r\n\r\n","import Image from \"./image\";\r\nexport default Image;","import React, {FC} from 'react';\r\nimport './image.css'\r\nimport {ImageType} from \"../../types\";\r\nimport {showPopup} from \"../../actions/action-creators\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\n\r\nconst Image: FC<ImagePropsType> = (props) => {\r\n    let {id, url, onShowPopup} = props;\r\n    return (\r\n        <div className=\"gallery__image\" onClick={() => onShowPopup(id)}>\r\n            <img src={url} alt=\"\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        onShowPopup: (id: number) => dispatch(showPopup(id))\r\n    }\r\n};\r\n\r\n\r\nlet connector = connect(null, mapDispatchToProps);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype ImagePropsType = PropsFromRedux & ImageType & {\r\n    key: any\r\n}\r\n\r\nexport default connector(Image);","import {\r\n    CLOSE_POPUP,\r\n    closePopupActionType,\r\n    FETCH_ALL_IMAGES,\r\n    FetchAllImagesType,\r\n    GET_COMMENT,\r\n    GET_IMAGE_DETAILS,\r\n    GET_IMAGES,\r\n    GetAllImagesActionType,\r\n    GetCommentActionType,\r\n    GetImageDetailsActionType,\r\n    HAS_ERROR,\r\n    HasErrorActionType,\r\n    SEND_COMMENT,\r\n    SendCommentActionType,\r\n    SHOW_POPUP,\r\n    showPopupActionType\r\n} from \"./action-types\";\r\nimport {CommentType, ImageDetailsType, ImageType} from \"../types\";\r\n\r\nexport const fetchAllImages = (): FetchAllImagesType => {\r\n    return {\r\n        type: FETCH_ALL_IMAGES\r\n    }\r\n};\r\n\r\nexport const getImages = (images: Array<ImageType>): GetAllImagesActionType => {\r\n    return {\r\n        type: GET_IMAGES,\r\n        payload: images,\r\n    }\r\n};\r\n\r\nexport const showPopup = (id: number) :showPopupActionType => {\r\n    return {\r\n        type: SHOW_POPUP,\r\n        payload: id\r\n    }\r\n};\r\n\r\n\r\nexport const closePopup = () :closePopupActionType => {\r\n    return {\r\n        type: CLOSE_POPUP,\r\n    }\r\n};\r\n\r\nexport const getImageDetails = (imageDetails: ImageDetailsType):GetImageDetailsActionType => {\r\n    return {\r\n        type: GET_IMAGE_DETAILS,\r\n        payload: imageDetails\r\n    }\r\n};\r\n\r\nexport const sendComment = ():SendCommentActionType => {\r\n    return {\r\n        type: SEND_COMMENT,\r\n    }\r\n};\r\n\r\nexport const getComment = (comment: CommentType & {name: string}):GetCommentActionType => {\r\n    return {\r\n        type: GET_COMMENT,\r\n        payload: comment\r\n    }\r\n};\r\n\r\nexport const hasError = ():HasErrorActionType => {\r\n    return {\r\n        type: HAS_ERROR,\r\n    }\r\n};","import {CommentType, ImageDetailsType, ImageType} from \"../types\";\r\nexport const FETCH_ALL_IMAGES = 'FETCH_ALL_IMAGES';\r\nexport const GET_IMAGES = 'GET_IMAGES';\r\nexport const SHOW_POPUP = 'SHOW_POPUP';\r\nexport const CLOSE_POPUP = 'CLOSE_POPUP';\r\nexport const GET_IMAGE_DETAILS = 'GET_IMAGE_DETAILS';\r\nexport const SEND_COMMENT = 'SENT_COMMENT';\r\nexport const GET_COMMENT = 'GET_COMMENT';\r\nexport const HAS_ERROR = 'HAS_ERROR';\r\n\r\nexport type GetAllImagesActionType = {\r\n    type: typeof GET_IMAGES,\r\n    payload: Array<ImageType>\r\n}\r\n\r\nexport type FetchAllImagesType = {\r\n    type: typeof FETCH_ALL_IMAGES;\r\n};\r\n\r\nexport type showPopupActionType = {\r\n    type: typeof SHOW_POPUP;\r\n    payload: number\r\n};\r\n\r\nexport type closePopupActionType = {\r\n    type: typeof CLOSE_POPUP;\r\n};\r\n\r\nexport type GetImageDetailsActionType = {\r\n    type: typeof GET_IMAGE_DETAILS,\r\n    payload: ImageDetailsType\r\n}\r\n\r\nexport type SendCommentActionType = {\r\n    type: typeof SEND_COMMENT,\r\n}\r\n\r\nexport type GetCommentActionType = {\r\n    type: typeof GET_COMMENT,\r\n    payload: CommentType & {name: string},\r\n}\r\n\r\nexport type HasErrorActionType = {\r\n    type: typeof HAS_ERROR,\r\n}","import Error from \"./error\";\r\nexport default Error;","import React, {FC} from 'react';\r\nimport './error.css';\r\nimport img from './error-image.png';\r\n\r\nconst Error: FC = () => {\r\n    return (\r\n        <section className=\"error\">\r\n            <div className=\"container\">\r\n                <div className=\"error__content\">\r\n                    <img className=\"error__content-image\" src={img} alt=\"error\"/>\r\n                    <h2 className=\"error__content-text\">Ð§ÑÐ¾-ÑÐ¾ Ð½Ðµ ÑÐ°Ðº Ñ ÐÐ°ÑÐ¸ Ð¸Ð½ÑÐµÑÐ½ÐµÑ ÑÐ¾ÐµÐ´Ð¸Ð½ÐµÐ½Ð¸ÐµÐ¼</h2>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n};\r\n\r\nexport default Error;","import React, {Component} from \"react\";\r\nimport './gallery.css';\r\n\r\nimport {connect, ConnectedProps} from 'react-redux';\r\nimport {AppState} from \"../../store\";\r\nimport {fetchAllImages, getImages, hasError} from \"../../actions/action-creators\";\r\nimport Preloader from \"../preloader\";\r\nimport ImageService from \"../../services/imageService\";\r\nimport {ImageType} from \"../../types\";\r\nimport Image from \"../image\";\r\nimport Error from \"../error\";\r\n\r\nclass Gallery extends Component<GalleryPropsType> {\r\n\r\n    componentDidMount(): void {\r\n        let imageService = new ImageService();\r\n        let {onStartLoading, onGetImages} = this.props;\r\n        onStartLoading();\r\n        imageService.getAllImages()\r\n            .then( (images: Array<ImageType>) => onGetImages(images))\r\n            .catch( () => this.props.onGetError())\r\n    }\r\n\r\n    render() {\r\n        let {images} = this.props;\r\n        if (!images) {\r\n            return <Preloader />\r\n        }\r\n\r\n        if (this.props.hasError) {\r\n            return <Error />\r\n        }\r\n        return (\r\n            <section className=\"gallery\">\r\n                <div className=\"container\">\r\n                    <div className=\"gallery__content\">\r\n                        {\r\n                            images.map( image => <Image key={image.id} {...image}/>)\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateToPropsType => {\r\n    return {\r\n        images: state.galleryReducer.images,\r\n        loading: state.galleryReducer.loading,\r\n        hasError: state.galleryReducer.hasError\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any): MapDispatchToPropsType => {\r\n    return {\r\n        onStartLoading: () => dispatch(fetchAllImages()),\r\n        onGetImages: (images: Array<ImageType>) => dispatch(getImages(images)),\r\n        onGetError: () => dispatch(hasError())\r\n    }\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    images: Array<ImageType> | null,\r\n    loading: boolean,\r\n    hasError: boolean\r\n}\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    onStartLoading: () => any,\r\n    onGetImages: (images: Array<ImageType>) => any,\r\n    onGetError: () => any,\r\n}\r\n\r\nconst connector = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n);\r\n\r\ntype GalleryPropsType = ConnectedProps<typeof connector>\r\n\r\nexport default connector(Gallery);","import Gallery from \"./gallery\";\r\nexport default Gallery;","import ErrorBoundary from \"./errorBoundary\";\r\nexport default ErrorBoundary;","import React, {Component} from \"react\";\r\nimport Error from \"../error\";\r\n\r\nexport default class ErrorBoundary extends Component {\r\n\r\n    state = {\r\n        hasError: false,\r\n    };\r\n\r\n    componentDidCatch(): void {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <Error />\r\n        }\r\n        return this.props.children;\r\n    }\r\n}","import ButtonLoading from \"./buttonLoading\";\r\nexport default ButtonLoading;","import React, {FC} from 'react';\r\nimport './buttonLoading.css';\r\n\r\nconst ButtonLoading: FC = () => {\r\n    return (\r\n        <div className=\"loadingio-spinner-ellipsis-u63xtythb5\">\r\n            <div className=\"ldio-54li72kx3co\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ButtonLoading;","import React, {FC} from 'react';\r\nimport './form-button.css';\r\nimport ButtonLoading from \"../buttonLoading\";\r\nimport {AppState} from \"../../store\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\n\r\nconst FormButton: FC<PropsFromReduxF> = (props) => {\r\n    return (\r\n        <button>\r\n            {\r\n                props.loadComment ? <ButtonLoading /> : 'ÐÑÑÐ°Ð²Ð¸ÑÑ ÐºÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸Ð¹'\r\n            }\r\n        </button>\r\n    )\r\n};\r\n\r\nlet mapStateToProps = (state: AppState): MapStateToProps => {\r\n    return {\r\n        loadComment: state.popupReducer.sendingComment\r\n    }\r\n};\r\n\r\ntype MapStateToProps = {\r\n    loadComment: boolean\r\n}\r\n\r\nlet connector = connect(mapStateToProps);\r\ntype PropsFromReduxF = ConnectedProps<typeof connector>\r\n\r\nexport default connector(FormButton);","import PopupForm from \"./popupForm\";\r\nexport default PopupForm;","import React, {FC} from 'react';\r\nimport './popupForm.css';\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport FormButton from \"../form-button/form-button\";\r\n\r\nconst PopupForm: FC<InjectedFormProps> = (props) => {\r\n    return (\r\n        <form className=\"popup-form\" onSubmit={props.handleSubmit} >\r\n            <Field required type=\"text\" name=\"name\" placeholder=\"ÐÐ°ÑÐµ Ð¸Ð¼Ñ\" component=\"input\"/>\r\n            <Field required type=\"text\" name=\"comment\" placeholder=\"ÐÐ°Ñ ÐºÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸Ð¹\" component=\"input\"/>\r\n            <FormButton/>\r\n        </form>\r\n    )\r\n};\r\n\r\n\r\nexport default reduxForm({form: \"commentForm\"})(PopupForm);","import Comment from \"./comment\";\r\nexport default Comment;","import React, {FC} from 'react';\r\nimport './comment.css';\r\nimport {CommentType} from \"../../types\";\r\n\r\nconst Comment:FC<PropsType> = (props) => {\r\n    let timestamp = props.date.toString();\r\n    timestamp = timestamp.substr(0, timestamp.length - 3);\r\n    let date = new Date(+timestamp * 1000);\r\n    let day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\r\n    let month = date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\r\n    let year = date.getFullYear();\r\n    let fullData = `${day}.${month}.${year}`;\r\n    return (\r\n        <div className=\"comment-item\">\r\n            <span className=\"date\">{fullData}</span>\r\n            <i className=\"comment-name\">{props.name}:</i>\r\n            <p className=\"comment-text\">{props.comment}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype PropsType = CommentType & {\r\n    name: string\r\n}\r\n\r\n\r\nexport default Comment;","import React, {Component} from 'react';\r\nimport './popup.css';\r\nimport PopupForm from \"../popupForm\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {AppState} from \"../../store\";\r\nimport ImageService from \"../../services/imageService\";\r\nimport {closePopup, getComment, getImageDetails, hasError, sendComment} from \"../../actions/action-creators\";\r\nimport {CommentType, ImageDetailsType} from \"../../types\";\r\nimport Comment from \"../comment\";\r\nimport Preloader from \"../preloader\";\r\nimport {clearFields} from \"redux-form\";\r\nimport Error from \"../error\";\r\n\r\nclass Popup extends Component<PropsFromRedux> {\r\n\r\n    componentDidMount(): void {\r\n        let imageService = new ImageService();\r\n        let {id, onGetImageDetails} = this.props;\r\n        imageService.getFullImageData(id)\r\n            .then( (data: ImageDetailsType) => onGetImageDetails(data))\r\n\r\n    }\r\n\r\n    handleFormSubmit = (values: any) => {\r\n        this.props.onSendComment();\r\n        let imageService = new ImageService();\r\n        let {id} = this.props;\r\n        let timeStamp: number = Date.now();\r\n        imageService.postComment(values, id, timeStamp)\r\n            .then( (data) => {\r\n                this.props.onGetComment(data);\r\n                this.props.clearForm()\r\n            });\r\n    };\r\n\r\n    render() {\r\n        let {image, onClosePopup, comments, hasError} = this.props;\r\n        if (hasError) {\r\n            return <Error />\r\n        }\r\n        let com;\r\n        if (image && comments && comments.length !== 0) {\r\n            let neededCom = comments.filter( (comment: CommentType & {name: string}) => {\r\n                // @ts-ignore\r\n                return comment.id === image.id\r\n            })\r\n            if (neededCom) {\r\n                // @ts-ignore\r\n                com = neededCom.map( (comm: CommentType & {name: string}, i: number) => <Comment key={i} {...comm}/>)\r\n            }\r\n\r\n        }\r\n            return (\r\n                <section className=\"popup\">\r\n                    <div className=\"container\">\r\n                        <div className=\"popup-block\">\r\n                            <div className=\"image-side\">\r\n                                {\r\n                                    image ? <img src={image ? image.url : undefined} alt=\"\"/> : <Preloader />\r\n                                }\r\n                            </div>\r\n                            <PopupForm onSubmit={this.handleFormSubmit}/>\r\n                            <div className=\"comments-side\">\r\n                                {\r\n                                    !comments ? 'ÐÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸ÐµÐ² Ð¿Ð¾ÐºÐ° Ð½ÐµÑ' : comments.length === 0 ? 'ÐÐ¾Ð¼Ð¼ÐµÐ½ÑÐ°ÑÐ¸ÐµÐ² Ð¿Ð¾ÐºÐ° Ð½ÐµÑ' : com\r\n                                }\r\n                            </div>\r\n                            <div className=\"close-btn\" onClick={() => onClosePopup()}>\r\n                                <span></span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState):MapStateToProps => {\r\n    return {\r\n        id: state.popupReducer.currentImageId,\r\n        load: state.popupReducer.loading,\r\n        image: state.popupReducer.imageDetails,\r\n        loadComment: state.popupReducer.sendingComment,\r\n        comments: state.popupReducer.comments,\r\n        hasError: state.galleryReducer.hasError\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any):MapDispatchToProps => {\r\n    return {\r\n        onSendComment: () => dispatch(sendComment()),\r\n        onClosePopup: () => dispatch(closePopup()),\r\n        onGetImageDetails: (imageDetails: ImageDetailsType) => dispatch(getImageDetails(imageDetails)),\r\n        onGetComment: (comment: CommentType & {name: string}) => dispatch(getComment(comment)),\r\n        clearForm:() => dispatch(clearFields('commentForm', false, false, ...['name', 'comment'])),\r\n        onGetError: () => dispatch(hasError())\r\n    }\r\n};\r\n\r\ntype MapStateToProps = {\r\n    id: number | null,\r\n    load: boolean,\r\n    image: ImageDetailsType | null,\r\n    loadComment: boolean,\r\n    comments: Array<CommentType & {name: string}> | null,\r\n    hasError: boolean,\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    onGetImageDetails: (imageDetails: ImageDetailsType) => any,\r\n    onClosePopup: () => any,\r\n    onSendComment: () => any,\r\n    onGetComment: (comment: CommentType & {name: string}) => any,\r\n    clearForm: () => any,\r\n    onGetError: () => any,\r\n}\r\n\r\nlet connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\nexport default connector(Popup);","import Popup from \"./popup\";\r\nexport default Popup;","import React, {FC} from 'react';\nimport './App.css';\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport Gallery from \"./components/gallery\";\nimport ErrorBoundary from \"./components/errorBoundary\";\nimport Popup from \"./components/popup\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {AppState} from \"./store\";\n\nconst App: FC<PropsFromRedux> = (props) => {\n    let {isPopup} = props;\n  return (\n    <div className=\"app\">\n        <Header />\n        <ErrorBoundary>\n            <Gallery />\n        </ErrorBoundary>\n        <div className=\"container\">\n            <p>\n                It is a test task from Avito. <br/>\n                Link: <a href=\"https://github.com/avito-tech/safedeal-frontend-trainee\">Click here to read</a><br/>\n                <i>Made by <a href=\"https://github.com/kyrsanter\">kyrsanter</a></i>\n            </p>\n        </div>\n        <Footer />\n        {\n            isPopup ? <Popup /> : null\n        }\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        isPopup: state.popupReducer.isOpen\n    }\n};\n\n\nlet connector = connect(mapStateToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FETCH_ALL_IMAGES, GET_IMAGES, HAS_ERROR} from \"../actions/action-types\";\r\nimport {ImageType} from \"../types\";\r\n\r\ntype InitialGalleryState = {\r\n    images: Array<ImageType> | null,\r\n    loading: boolean,\r\n    hasError: boolean\r\n}\r\n\r\nlet initialGalleryState = {\r\n    images: null,\r\n    loading: false,\r\n    hasError: false\r\n};\r\n\r\nlet galleryReducer = (state: InitialGalleryState = initialGalleryState, action: any): InitialGalleryState => {\r\n    switch (action.type) {\r\n        case FETCH_ALL_IMAGES:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case GET_IMAGES:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                images: action.payload\r\n            };\r\n        case HAS_ERROR:\r\n            return {\r\n                ...state,\r\n                hasError: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default galleryReducer;\r\n","import {CLOSE_POPUP, GET_COMMENT, GET_IMAGE_DETAILS, SEND_COMMENT, SHOW_POPUP} from \"../actions/action-types\";\r\nimport {CommentType, ImageDetailsType} from \"../types\";\r\n\r\ntype PopupInitialStateType = {\r\n    loading: boolean,\r\n    isOpen: boolean,\r\n    currentImageId: number | null,\r\n    imageDetails: ImageDetailsType | null,\r\n    sendingComment: boolean,\r\n    comments: Array<CommentType & {name: string}> | null\r\n}\r\n\r\nlet popupInitialState: PopupInitialStateType = {\r\n    loading: false,\r\n    isOpen: false,\r\n    currentImageId: null,\r\n    imageDetails: null,\r\n    sendingComment: false,\r\n    comments: null,\r\n};\r\n\r\nlet popupReducer = (state: PopupInitialStateType = popupInitialState, action: any):PopupInitialStateType => {\r\n    switch (action.type) {\r\n        case SHOW_POPUP:\r\n            return {\r\n                ...state,\r\n                isOpen: true,\r\n                loading: true,\r\n                currentImageId: action.payload\r\n            };\r\n        case GET_IMAGE_DETAILS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                imageDetails: action.payload\r\n            };\r\n        case CLOSE_POPUP:\r\n            return {\r\n                ...state,\r\n                isOpen: false,\r\n                imageDetails: null\r\n            };\r\n        case SEND_COMMENT:\r\n            return {\r\n                ...state,\r\n                sendingComment: true\r\n            };\r\n        case GET_COMMENT:\r\n            let newComments = [];\r\n            if (!state.comments) {\r\n                newComments = [action.payload]\r\n            }\r\n            else {\r\n                newComments = [...state.comments, action.payload];\r\n            }\r\n            return {\r\n                ...state,\r\n                sendingComment: false,\r\n                comments: newComments\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default popupReducer;","import {createStore, combineReducers} from \"redux\";\r\nimport galleryReducer from \"./reducers/galleryReducer\";\r\nimport popupReducer from \"./reducers/popupReducer\";\r\nimport {reducer as formReduces} from \"redux-form\";\r\n\r\nlet rootReducer = combineReducers({\r\n    galleryReducer,\r\n    popupReducer,\r\n    form: formReduces\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nlet store = createStore(rootReducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nlet app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/error-image.79a8a2f3.png\";"],"sourceRoot":""}